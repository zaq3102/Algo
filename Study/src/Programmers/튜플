import java.util.*;

class Solution {
    public int[] solution(String s) {
        StringTokenizer st = null;
        StringTokenizer st2 = null;
        Map<String, Integer> map = new HashMap<>();
        
        s = s.substring(2, s.length() - 2);
        st = new StringTokenizer(s, "}{");
        int t = st.countTokens();
        ArrayList<Integer> arrL = new ArrayList<>(); // KEY값의 길이를 저장
        for(int i = 0; i < t; i++) {
            String temp = st.nextToken();
            if(temp.charAt(temp.length() - 1) == ',') {
                continue;
            }
            arrL.add(temp.length());
            map.put(temp, temp.length());
        }
        Collections.sort(arrL);
        
        // newArr는 항상 originArr보다 1씩 늦다
        ArrayList<Integer> result = new ArrayList<>();
        result.add(Integer.parseInt(getKey(map, arrL.get(0))));
        for(int i = 0; i < arrL.size() - 1; i++) {
            int[] originArr = new int[100001];
            int[] newArr = new int[100001];
            String temp = getKey(map, arrL.get(i));
            String temp2 = getKey(map, arrL.get(i + 1));
            st = new StringTokenizer(temp, ",");
            st2 = new StringTokenizer(temp2, ",");
            while(st.countTokens() != 0) {
                int gab = Integer.parseInt(st.nextToken());
                newArr[gab]++;
            }
            while(st2.countTokens() != 0) {
                int gab2 = Integer.parseInt(st2.nextToken());
                originArr[gab2]++;
            }
            st = new StringTokenizer(temp2, ",");
            while(st.countTokens() != 0) {
                int gab3 = Integer.parseInt(st.nextToken());
                if(originArr[gab3] != newArr[gab3]) {
                    result.add(gab3);
                    break;
                }
            }
            
            st = null;
            st2 = null;
        } // end of for
        
        int[] answer = new int[result.size()];
        for(int i = 0; i < result.size(); i++) {
            answer[i] = result.get(i);
        }
        
        return answer;
    }
    
    public static String getKey(Map<String, Integer> map, Integer value) {
        // 찾을 hashmap 과 주어진 단서 value
        for (String key : map.keySet()) {
            if(key.length() == value) {
                return key;
            }
        }
        return "";
    }
}

// 빡구현 문제
// 실패요인 0 : 처음에는 같은 값이 연이어 오면 체크할 수 없는 contain 구조로 설계해서 수정함
// 실패요인 1 : getKey함수 리턴값을 ""가 아닌 null로 해버려서 런타임에러 찾는데 한 세월 걸림
// 실패요인 2 : if (value == map.get(key)) 를 if(key.length() == value) 로 고치니까 해결
//             이건 왜 그런지 잘 모르겠음...

// 1. 앞뒤 인덱스 2개씩 제거
// 2. },{ 를 구분자로 StringTokenizer
// 3. 공백을 구분자로 ST
// map에 배열값, 배열길이 쌍으로 넣고
// 배열길이를 따로 배열로 만들고
// 배열 정렬해서 맞는 value의 key값을 찾자