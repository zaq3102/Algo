import java.util.*;

class Solution
{
    static int max = 0;
    public int solution(int [][]board) {
        if(isAllZero(board)) {
            return 0;
        }
        int answer = 1;
        for (int i = 1; i < board.length; i++) {
            for (int j = 1; j < board[0].length; j++) {
                if(board[i][j] == 0) {
                    continue;
                }
                board[i][j] = Math.min(Math.min(board[i - 1][j], board[i][j - 1]), board[i - 1][j - 1]) + 1;
                answer = Math.max(answer, board[i][j]);
            }
        }

        return answer * answer;
    }
    
    private static boolean isAllZero(int[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == 1) {
                    return false;
                }
            }
        }
        return true;
    } 
}

// DP 문제 (배낭문제와 유사)
// 1,1부터 시작해서 우하 방향으로 진행
// 현재위치가 0이면 continue
// 1이면 위의 값과 왼쪽의 값 중 작은 값을 찾아놓고 그 (작은값)이랑 (좌상방향의 값 + 1) 중 작은 값을 현재 위치의 값으로 지정한다
// 만약 위나 왼쪽이 0이라면? -> 정사각형 조건 성립X 이므로 좌상 과 관계없이 무조건 현재는 1
// 만약 위와 왼쪽이 모두 1이라면? -> 좌상값마저 1이라면 정사각형 성립이므로 1을 더해야한다!!



// 한 변의 길이 정하는 함수 + 해당 구역이 채워졌는지 확인하는 함수
// 와 같이 풀면 완탐으로 푸는거 -> 시간초과뜸
