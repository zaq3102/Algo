import java.util.*;

class Solution {
    static int[] answer = new int[2];
    
    public int[] solution(int[][] arr) {
        int originSize = arr.length;
        dq(0, 0, originSize, arr);
        return answer;
    }
    
    public static void dq(int startX, int startY, int size, int[][] arr){
        if(check(startX, startY, size, arr)) {
            answer[arr[startX][startY]]++;
            return;
        }
        
        dq(startX, startY, size/2, arr);
        dq(startX + size/2, startY, size/2, arr);
        dq(startX, startY + size/2, size/2, arr);
        dq(startX + size/2, startY + size/2, size/2, arr);
    }
    
    public static boolean check(int x, int y, int size, int[][] arr){
        for(int i = x; i < x + size; i++) {
            for(int j = y; j < y + size; j++) {
                if(arr[x][y] != arr[i][j]) {
                    return false;
                }
            }
        } // end of for
        return true;
    } // end of check
}

// 분할정복 EASY Ver.
// 분할(dq)하고 처리(check)하는 로직을 구분지어 만들자
// 보통의 경우 재귀를 이용한다 BUT 효율성에 대해선 따져봐야함
