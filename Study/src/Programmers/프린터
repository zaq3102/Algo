import java.util.*;

class Solution {
    public int solution(int[] priorities, int location) {
        int answer = 0;
        // int goal_value = priorities[location];

        Queue<Integer> queue = new LinkedList<>();
        Queue<Integer> idxQ = new LinkedList<>();
        
        for(int i = 0; i < priorities.length; i++) {
            queue.offer(priorities[i]);
            idxQ.offer(i);
        }
        
        int[] values = priorities;
        Arrays.sort(values);
        int valueIdx = priorities.length - 1;
        
        while(true) {
            // System.out.println("valueIdx : " + valueIdx + ", value : " + values[valueIdx]);
            // System.out.println("peek : " + queue.peek());
            if(queue.peek() == values[valueIdx]) {
                // System.out.println("Correct");
                // 출력해야할 문서라면?
                if(idxQ.peek() == location) {
                    // 정답을 찾았다면?
                    answer++;
                    break;
                }
                queue.poll();
                idxQ.poll();
                valueIdx--;
                answer++;
            } else {
                // System.out.println("Pass");
                queue.offer(queue.poll());
                idxQ.offer(idxQ.poll());
            }
        }
        
        return answer;
    }
}

// 값큐 인덱스큐 따로 두면 쉽게 풀림
// 얕은 복사 : 주소지를 복사 -> 원본 값 or 복사 값 변경 시 서로에게 영향이 미친다
// 깊은 복사 : 값 자체를 복사 -> 서로에게 영향 X
// 2 1 3 2
// 3 2 2 1

