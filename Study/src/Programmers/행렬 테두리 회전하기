import java.util.*;

class Solution {
    static int[][] map;
    public int[] solution(int rows, int columns, int[][] queries) {
        int[] answer = new int[queries.length];
        map = new int[rows + 1][columns + 1];
        
        int now = 1;
        for(int i = 1; i <= rows; i++) {
            for(int j = 1; j <= columns; j++) {
                map[i][j] = now++;
            }
        }
        
        for(int i = 0; i < queries.length; i++) {
            answer[i] = turn(queries[i][0], queries[i][1], queries[i][2], queries[i][3]);
        }
        
        return answer;
    }
    
    public static int turn(int x1, int y1, int x2, int y2) {
        // x1 y1값을 빼고 한칸씩 옮겨준 다음 빼놓은 값을 x1 y1+1 위치에 넣어준다
        // 순서 : y1 -> x2 -> y2 -> x1 -> 뺀값넣기
        int min = map[x1][y1];
        int last = map[x1][y1];
        // y1
        for(int i = x1; i < x2; i++) {
            map[i][y1] = map[i + 1][y1];
            min = map[i][y1] < min ? map[i][y1] : min;
        }
        // x2
        for(int i = y1; i < y2; i++) {
            map[x2][i] = map[x2][i + 1];
            min = map[x2][i] < min ? map[x2][i] : min;
        }
        // y2
        for(int i = x2; i > x1; i--) {
            map[i][y2] = map[i - 1][y2];
            min = map[i][y2] < min ? map[i][y2] : min;
        }
        // x1
        for(int i = y2; i > y1; i--) {
            map[x1][i] = map[x1][i - 1];
            min = map[x1][i] < min ? map[x1][i] : min;
        }
        // 빼놓은거 넣기
        map[x1][y1 + 1] = last;
        
        return min;
    }
}

// 원샷원킬! 한방에 통과
// 로직 세우고 그대로 구현하면 되는 EASY 구현문제
