import java.util.*;

class Solution {
    static int L;
    static int[] selected;
    static int[] rank = new int[11];
    static String order;
    static Map<String, Integer> map = new HashMap<>();
    
    public String[] solution(String[] orders, int[] course) {
        Map<Integer, Integer> courseMap = new HashMap<>();
        
        for(int i = 0; i < course.length; i++) {
            courseMap.put(course[i], 0);
        }
        
        char[] chars = null;
        for(int i = 0; i < orders.length; i++) {
            L = orders[i].length();
            chars = orders[i].toCharArray();
            Arrays.sort(chars);
            order = new String(chars);
            for(int j = 2; j <= L; j++) {
                if(!courseMap.containsKey(j)) {
                    continue;
                }
                selected = new int[j];
                comb(0,0,j);
            }
        } // end of for
        
        ArrayList<String> arr = new ArrayList<>();
        for(String key : map.keySet()) {
            if(map.get(key) == 1 || map.get(key) < rank[key.length()]) {
                continue;
            }
            arr.add(key);
        }
        
        Collections.sort(arr);
        String[] answer = new String[arr.size()];
        for(int i = 0; i < arr.size(); i++) {
            answer[i] = arr.get(i);
        }
        return answer;
    } // end of main
    
    public static void comb(int cnt, int start, int R) {
        if(cnt == R) {
            String temp = "";
            for(int k = 0; k < R; k++) {
                temp += order.charAt(selected[k]) + "";
            }
            if(map.containsKey(temp)) {
                map.put(temp, map.get(temp) + 1);
                if(map.get(temp) > rank[R]) {
                    rank[R] = map.get(temp);
                }
            } else {
                map.put(temp, 1);
            }
            return;
        }
        
        for(int i = start; i < L; i++) {
            selected[cnt] = i;
            comb(cnt + 1, i + 1, R);
        }
    } // end of comb
}

// 손님 주문을 알파벳 순서로 정렬
// -> 문자열을 char[]로 변환한 다음(order.toCharArray()) -> Arrays.sort(char[]) 해주고 -> new String(char) 해주면됨
// 한 오더의 길이만큼 조합 구성을 모두 map에 넣자

