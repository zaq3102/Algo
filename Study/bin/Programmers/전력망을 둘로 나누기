import java.util.*;

class Solution {
    static int result;
    public int solution(int n, int[][] wires) {
        result = 101;
        int[][] map = new int[n + 1][n + 1];
        for(int i = 0; i < wires.length; i++) {
            map[wires[i][0]][wires[i][1]] = 1;
            map[wires[i][1]][wires[i][0]] = 1;
        }
        for(int i = 0; i < wires.length; i++) {
            map[wires[i][0]][wires[i][1]] = 0;
            map[wires[i][1]][wires[i][0]] = 0;
            BFS(map, wires[i][0], wires[i][1], n);
            map[wires[i][0]][wires[i][1]] = 1;
            map[wires[i][1]][wires[i][0]] = 1;
            
            if(result == 0) {
                return 0;
            }
        }
        
        return result;
    }
    
    public static void BFS(int[][] copyMap, int a, int b, int n) {
        boolean[] nodes = new boolean[n + 1];
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(a);
        // nodes[a] = true;
        
        int cntA = 0;
        while(queue.size() != 0) {
            cntA++;
            int temp = queue.poll();
            nodes[temp] = true;
            
            for(int i = 1; i < copyMap.length; i++) {
                if((!nodes[i]) && (copyMap[temp][i] == 1)) {
                    queue.offer(i);
                }
            }
        } // end of while
        
        queue.offer(b);
        nodes = new boolean[n + 1];
        int cntB = 0;
        while(queue.size() != 0) {
            cntB++;
            int temp = queue.poll();
            nodes[temp] = true;
            
            for(int i = 1; i < copyMap.length; i++) {
                if((!nodes[i]) && (copyMap[temp][i] == 1)) {
                    queue.offer(i);
                }
            }
        } // end of while
        
        result = Math.abs(cntA - cntB) < result ? Math.abs(cntA - cntB) : result;
    } // end of BFS
}

// EASY SIMPLE BFS!

// 모든 노드는 연결되어 있따
// 즉, 끊는 두 노드를 기준으로 BFS를 돌려서 갯수만 세주면 끝!
